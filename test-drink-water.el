;;; test-drink-water.el --- Tests for drink-water.el -*- lexical-binding: t; -*-

(require 'ert)
(require 'drink-water)

(ert-deftest drink-water--daily-need-ml-test ()
  (let ((drink-water-weight-kg 60))
    (should (= (drink-water--daily-need-ml) 2100)))
  (let ((drink-water-weight-kg 80))
    (should (= (drink-water--daily-need-ml) 2800))))

(ert-deftest drink-water--cups-per-day-test ()
  (let ((drink-water-weight-kg 70)
        (drink-water-cup-size-ml 200))
    (should (= (drink-water--cups-per-day) 13)))
  (let ((drink-water-weight-kg 50)
        (drink-water-cup-size-ml 500))
    (should (= (drink-water--cups-per-day) 4))))

(ert-deftest drink-water--interval-minutes-test ()
  (let ((drink-water-wake-hour 8)
        (drink-water-sleep-hour 20)
        (drink-water-weight-kg 60)
        (drink-water-cup-size-ml 300)
        (drink-water-minimum-interval-minutes 90))
    (should (>= (drink-water--interval-minutes) 90))
    (should (= (drink-water--interval-minutes)
               (max 90 (floor (/ (* 12 60) (drink-water--cups-per-day))))))))

(ert-deftest drink-water--random-quote-test ()
  (let ((drink-water-quotes '("A" "B" "C")))
    (should (member (drink-water--random-quote) drink-water-quotes))))

(ert-deftest drink-water--minimum-interval-enforced-test ()
  "Test that notifications are not shown more frequently than the minimum interval."
  (let ((drink-water-minimum-interval-minutes 60)
        (drink-water--last-notification-time (float-time (current-time)))
        (drink-water--cups-today 0)
        (drink-water--timer nil)
        (drink-water--last-reset (current-time))
        (drink-water-quotes '("test quote"))
        (drink-water-weight-kg 70)
        (drink-water-cup-size-ml 250)
        (drink-water-wake-hour 8)
        (drink-water-sleep-hour 22))
    (let ((alert-called nil))
      (cl-letf (((symbol-function 'alert)
                 (lambda (&rest args) (setq alert-called t))))
        (drink-water--reminder)
        (should (not alert-called))))
    ;; Now simulate enough time has passed
    (let ((drink-water--last-notification-time (- (float-time (current-time)) 3700))
          (alert-called nil))
      (cl-letf (((symbol-function 'alert)
                 (lambda (&rest args) (setq alert-called t))))
        (drink-water--reminder)
        (should alert-called)))))

(provide 'test-drink-water)
;;; test-drink-water.el ends here 